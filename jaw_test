import maya.cmds as mc
for module_name in sys.modules.keys():
    top_module = module_name.split('.'[0])
    if top_module == 'jaw_utils':
        del(sys.modules[module_name])
''' 
0.7 , 0.5 , 0.5
'''
GROUP = 'GROUP'
JOINT = 'JNT'
GUIDE = 'guide'
JAW = 'jaw'
LEFT = 'L'
RIGHT = 'R'
CENTER = 'C'
number = 5
jaw_guide_grp = None

def createUI():
    if mc.window('LipAutoRigg', exists=True):
        mc.deleteUI('LipAutoRigg')

    window = mc.window('LipAutoRigg', title='Lip Auto Rigg', widthHeight=(650, 350),bgc=(0.6,.5,.6))
    mc.columnLayout(adjustableColumn=True)

    mc.text(label='LIP_AUTORIGG', align='center', font='boldLabelFont')
    mc.separator(height=15, style='none')
    mc.separator(height=15, style='none')

    mc.text(label=' INSERT YOURS LOCS FOR JNTS FOR SIDES')
    num_guides_field = mc.intField(value=number, minValue=1, width=100)
    mc.separator(height=12, style='none')

    mc.button(label='Create Locators', command=lambda x: createGuides(mc.intField(num_guides_field, q=True, value=True)),bgc=(.7,.5,0.5))
    mc.separator(height=20, style='none')

    mc.button(label='build', command=lambda x: build(),bgc=(.7,.5,0.5))
    mc.separator(height=15, style='none')


    mc.button(label='Close', command=('mc.deleteUI(\"LipAutoRigg\", window=True)'), bgc=(0.5, 0.2, 0.2))
    mc.separator(height=22, style="none")

    mc.showWindow(window)


def createGuides(number=5):

    global jaw_guide_grp 
    jaw_guide_grp = mc.group(em=True, name='{}_{}_{}_{}'.format(CENTER, JAW, GUIDE, GROUP))
    locs_grp = mc.group(em=True, name='{}_{}_lip_{}_{}'.format(CENTER, JAW, GUIDE, GROUP), parent=jaw_guide_grp)
    lip_locs_grp = mc.group(em=True, name='{}_lipMinor_{}_{}'.format(CENTER, GUIDE, GROUP), parent=locs_grp)
   
    for part in ['Upper', 'Lower']:
        part_mult = 1 if part == 'Upper' else -1
        mid_data = (0, part_mult, 0)

        mid_loc = mc.spaceLocator(name='{}_{}{}_lip_{}'.format(CENTER, JAW, part, GUIDE))[0]
        mc.parent(mid_loc, lip_locs_grp)

        for side in 'LR':
            for x in range(number):
                multiplier = x + 1 if side == 'R' else -(x + 1)
                loc_data = (multiplier, part_mult, 0)
                loc = mc.spaceLocator(name='{}_{}{}_lip_{:02d}_{}'.format(side, JAW, part, x+1, GUIDE))[0]
                mc.parent(loc, lip_locs_grp)
                mc.setAttr('{}.t'.format(loc), *loc_data)
               
        
        mc.setAttr('{}.t'.format(mid_loc), *mid_data)
    
    for side in [LEFT, RIGHT]:
        corner_loc = mc.spaceLocator(name='{}_{}Corner_lip_{}'.format(side, JAW, GUIDE))[0]
        mc.parent(corner_loc, lip_locs_grp)        
        if side == LEFT:
            mc.setAttr('{}.t'.format(corner_loc), *(number + 1, 0, 0))
        else:
            mc.setAttr('{}.t'.format(corner_loc), *(-(number + 1), 0, 0))
    
    mc.select(cl=True)

    jaw_base_guide = mc.group(em=True, name='{}_{}_base_{}_{}'.format(CENTER, JAW, GUIDE, GROUP), parent=jaw_guide_grp)
    jaw_guide = mc.spaceLocator(name='loc_jaw_guide')[0]
    jaw_inverse_guide = mc.spaceLocator(name='loc_inverse_jaw_guide')[0]

    mc.setAttr('{}.t'.format(jaw_guide), *(0, 1, -number))
    mc.setAttr('{}.t'.format(jaw_inverse_guide), *(0, -1, -number))

    mc.parent(jaw_guide, jaw_base_guide)
    mc.parent(jaw_inverse_guide, jaw_base_guide)

# creamos herarquia para grps

def createHierarchyAndJoints(*args):
    main_grp = mc.group(em=True, name='{}_{}_rig_{}'.format(CENTER, JAW, GROUP))
    mc.group(em=True, name='{}_{}Lip_{}'.format(CENTER, JAW, GROUP), parent=main_grp)
    mc.group(em=True, name='{}_{}Base_{}'.format(CENTER, JAW, GROUP), parent=main_grp)
    mc.group(em=True, name='{}_{}Lip_minor_{}'.format(CENTER, JAW, GROUP), parent=main_grp)
    mc.group(em=True, name='{}_{}Lip_broad_{}'.format(CENTER, JAW, GROUP), parent=main_grp)

    

# creamos lip guides como grps
def lip_guides():
    grp = '{}_lipMinor_{}_{}'.format(CENTER, GUIDE, GROUP)
    return [loc for loc in mc.listRelatives(grp) if mc.objExists(loc)]

def jaw_guides():
    grp = '{}_{}_{}_{}'.format(CENTER, JAW, GUIDE, GROUP)
    return [loc for loc in mc.listRelatives(grp) if mc.objExists(loc)]


# creamos los jnts 
def createMinorJoints():
    for guide in lip_guides():
        mat = mc.xform(guide, q=True, m=True, ws=True)
        jnt = mc.joint(name=guide.replace(GUIDE, JOINT))
        mc.setAttr('{}.radius'.format(jnt), 0.5)
        mc.xform(jnt, m=mat, ws=True)
        mc.parent(jnt, '{}_{}Lip_minor_{}'.format(CENTER, JAW, GROUP))

# creamos los broad joints
def createBroadJoints():
    upper_joint = mc.joint(name='{}_{}_broadUpper_{}'.format(CENTER, JAW, JOINT))
    lower_joint = mc.joint(name='{}_{}_broadLower_{}'.format(CENTER, JAW, JOINT))
    left_joint = mc.joint(name='{}_{}_broadCorner_{}'.format(LEFT, JAW, JOINT))
    right_joint = mc.joint(name='{}_{}_broadCorner_{}'.format(RIGHT, JAW, JOINT))

    mc.parent([upper_joint, lower_joint, left_joint, right_joint], '{}_{}Lip_broad_{}'.format(CENTER, JAW, GROUP))

    upper_pos = mc.xform('{}_{}Upper_lip_{}'.format(CENTER, JAW, GUIDE), q=True, m=True, ws=True)
    lower_pos = mc.xform('{}_{}Lower_lip_{}'.format(CENTER, JAW, GUIDE), q=True, m=True, ws=True)
    left_pos = mc.xform('{}_{}Corner_lip_{}'.format(LEFT, JAW, GUIDE), q=True, m=True, ws=True)
    right_pos = mc.xform('{}_{}Corner_lip_{}'.format(RIGHT, JAW, GUIDE), q=True, m=True, ws=True)

    mc.xform(upper_joint, m=upper_pos)
    mc.xform(lower_joint, m=lower_pos)
    mc.xform(left_joint, m=left_pos)
    mc.xform(right_joint, m=right_pos)

    mc.select(cl=True)


# creamos base para Jaw
def createJawBase():
    base_name = '{}_{}Base_{}'.format(CENTER, JAW, GROUP)
    if not mc.objExists(base_name):
        mc.group(em=True, name=base_name)

    guides = jaw_guides()
    if len(guides) < 2:
        print('dont have jawbase guides')
        return
    jaw_jnt = mc.joint(name='{}_{}_{}'.format(CENTER, JAW, JOINT))
    jaw_inverse_jnt = mc.joint(name='{}_inverse_{}_{}'.format(CENTER, JAW, JOINT))

    mc.xform(jaw_jnt, m=mc.xform(guides[0], q=True, m=True, ws=True), ws=True)
    mc.xform(jaw_inverse_jnt, m=mc.xform(guides[1], q=True, m=True, ws=True), ws=True)

    mc.parent(jaw_jnt, base_name)
    mc.parent(jaw_inverse_jnt, base_name)
    mc.select(cl=True)

    # Hacer que los joints sean hijos de los locators
    loc_jaw_guide = mc.ls('loc_jaw_guide')[0]
    loc_inverse_jaw_guide = mc.ls('loc_inverse_jaw_guide')[0]
    mc.parent(jaw_jnt, loc_jaw_guide)
    mc.parent(jaw_inverse_jnt, loc_inverse_jaw_guide)
    
    mc.select(cl=True)

    mc.createNode('transform', name='{}_offset_AUTO'.format(jaw_jnt))
    mc.createNode('transform', name='{}_offset_AUTO'.format(jaw_inverse_jnt))

    mc.createNode('transform', name='{}_offset_OFF'.format(jaw_jnt))
    mc.createNode('transform', name='{}_offset_OFF'.format(jaw_inverse_jnt))

    mc.select(cl=True)

def constraintBroadJoints():
    # Definir los nombres de los objetos
    jaw_joint = '{}_{}_{}'.format(CENTER, JAW, JOINT)
    inverse_jaw_joint = '{}_inverse_{}_{}'.format(CENTER, JAW, JOINT)
    broad_upper = '{}_{}_broadUpper_{}'.format(CENTER, JAW, JOINT)
    broad_lower = '{}_{}_broadLower_{}'.format(CENTER, JAW, JOINT)
    broad_left = '{}_{}_broadCorner_{}'.format(LEFT, JAW, JOINT)
    broad_right = '{}_{}_broadCorner_{}'.format(RIGHT, JAW, JOINT)
    
    # Aplicar restricciones de padres
    mc.parentConstraint(jaw_joint, broad_lower, mo=True)
    mc.parentConstraint(inverse_jaw_joint, broad_upper, mo=True)
    mc.parentConstraint(broad_upper, broad_lower, broad_left, mo=True)
    mc.parentConstraint(broad_upper, broad_lower, broad_right, mo=True)
    
    mc.select(cl=True)


def getLipParts(part=None):

    upper_token = 'jawUpper'
    lower_token = 'jawLower'
    corner_token = 'jawCorner'

    C_upper = '{}_{}_broadUpper_{}'.format(CENTER, JAW, JOINT)
    C_lower = '{}_{}_broadLower_{}'.format(CENTER, JAW, JOINT)
    L_corner = '{}_{}_broadCorner_{}'.format(LEFT, JAW, JOINT)
    R_corner = '{}_{}_broadCorner_{}'.format(RIGHT, JAW, JOINT)

    lip_joints = mc.listRelatives('{}_{}_rig_{}'.format(CENTER, JAW, GROUP), allDescendents=True)

    if lip_joints is not None:
        lookUp = {'C_upper': {}, 'C_lower': {},
                  'L_upper': {}, 'L_lower': {},
                  'R_upper': {}, 'R_lower': {},
                  'L_corner': {}, 'R_corner': {}}

        for joint in lip_joints:
            if mc.objectType(joint) != 'joint':
                continue

            if joint.startswith('C') and upper_token in joint:
                lookUp['C_upper'][joint] = [C_upper]

            if joint.startswith('C') and lower_token in joint:
                lookUp['C_lower'][joint] = [C_lower]

            if joint.startswith('L') and upper_token in joint:
                lookUp['L_upper'][joint] = [C_upper, L_corner]

            if joint.startswith('L') and lower_token in joint: 
                lookUp['L_lower'][joint] = [C_lower, L_corner]

            if joint.startswith('R') and upper_token in joint:
                lookUp['R_upper'][joint] = [C_upper, R_corner]

            if joint.startswith('R') and lower_token in joint:
                lookUp['R_lower'][joint] = [C_lower, R_corner]

            if joint.startswith('L') and corner_token in joint:
                lookUp['L_corner'][joint] = [L_corner]

            if joint.startswith('R') and corner_token in joint:
                lookUp['R_corner'][joint] = [R_corner]

        if part:
            return lookUp[part]
        else:
            return lookUp
    else:
        return {}


def lipPart(part):
    """
    :param part:
    :return:
    """

    lip_parts =  [reversed(sorted(getLipParts()['L_{}'.format(part)].keys())),
                  getLipParts()['C_{}'.format(part)].keys(),
                  sorted(getLipParts()['R_{}'.format(part)].keys())]
    
    return [joint for joint in lip_parts for joint in joint]


def createSeal(part):
    seal_name = '{}_seal_{}'.format(CENTER, GROUP)
    seal_parent = seal_name if mc.objExists(seal_name) else mc.createNode('transform', name=seal_name)

    part_grp = mc.createNode('transform', name=seal_name.replace('seal', 'seal_{}'.format(part)), parent=seal_parent)

    l_corner = '{}_{}_broadCorner_{}'.format(LEFT, JAW, JOINT)
    r_corner = '{}_{}_broadCorner_{}'.format(RIGHT, JAW, JOINT)

    value = len(lipPart(part))

    for index, joint in enumerate(lipPart(part)):
        node = mc.createNode('transform', name=joint.replace('JNT', '{}.SEAL'.format(part)), parent=part_grp)
        mat = mc.xform(joint, q=True, m=True, ws=True)
        mc.xform(node, m=mat, ws=True)

        constraint = mc.parentConstraint(l_corner, r_corner, node, mo=True)[0]
        mc.setAttr('{}.interpType'.format(constraint), 2)


        l_corner_value = float(index) / float(value - 1)
        r_corner_value = 1 - l_corner_value

        l_corner_attr = '{}.{}W0'.format(constraint, l_corner)
        r_corner_attr = '{}.{}W1'.format(constraint, r_corner)

        mc.setAttr(l_corner_attr, l_corner_value)
        mc.setAttr(r_corner_attr, r_corner_value)

        
        mc.select (cl=True)


def createJawAttrs():
    node = mc.createNode('transform', name = 'jaw_attributes',parent = '{}_{}_rig_{}'.format(CENTER,JAW,GROUP))
    jaw_attr= 'jaw_attributes'
    mc.addAttr(jaw_attr, at='double', ln='L_seal', min=0, max=10 ,dv=0)
    mc.addAttr(jaw_attr, at='double', ln='R_seal', min=0, max=10 ,dv=0)
    mc.addAttr(jaw_attr, at='double', ln='L_seal_delay', min=0.1, max=10 ,dv=4)
    mc.addAttr(jaw_attr, at='double', ln='R_seal_delay', min=0.1, max=10 ,dv=4)

    mc.addAttr(node, ln=sorted(getLipParts()['C_upper'].keys())[0], min=0,max=1,dv=0)
    mc.setAttr('{}.{}'.format(node, sorted(getLipParts()['C_upper'].keys())[0]), lock=1)

    for upper in sorted(getLipParts()['L_upper'].keys()):
        mc.addAttr(node, ln=upper, min=0, max=1, dv=0)

    mc.addAttr(node, ln=sorted(getLipParts()['L_corner'].keys())[0],min=0 ,max=1 ,dv=1)
    mc.setAttr('{}.{}'.format(node, sorted(getLipParts()['L_corner'].keys())[0]), lock=1)

    for lower in sorted(getLipParts()['L_lower'].keys())[::-1]:
        mc.addAttr(node, ln=lower, min=0,max=1,dv=0)

    mc.addAttr(node, ln=sorted(getLipParts()['C_lower'].keys())[0],min=0,max=1,dv=0)
    
    mc.setAttr('{}.{}'.format(node,sorted(getLipParts()['C_lower'].keys())[0]), lock=1)


def createConstraints():
    for value in getLipParts().values():
        for lip_jnt, broad_jnt in value.items():
            # Verificar si el nombre de la articulaci�n contiene "Corner"
            if "Corner" in lip_jnt:
                continue  # Saltar esta iteraci�n si es un "Corner" joint
            seal_token = "upper_SEAL" if "Upper" in lip_jnt else "lower_SEAL"
            lip_seal = lip_jnt.replace(JOINT, seal_token)

            if not mc.objExists(lip_seal):
                const = mc.parentConstraint(broad_jnt, lip_seal, lip_jnt, mo=True)[0]
                mc.setAttr("{}.interpType".format(const), 2)
                continue

            const = mc.parentConstraint(broad_jnt, lip_seal, lip_jnt, mo=True)[0]
            mc.setAttr("{}.interpType".format(const), 2)

            if len(broad_jnt) == 1:
                seal_attr = "{}_parentConstraint1.{}W1".format(lip_jnt, lip_seal)
                rev = mc.createNode("reverse", name=lip_jnt.replace(JOINT, "REV"))
                mc.connectAttr(seal_attr, "{}.inputX".format(rev))
                mc.connectAttr("{}.outputX".format(rev), "{}_parentConstraint1.{}W0".format(lip_jnt, broad_jnt[0]))
                mc.setAttr(seal_attr, 0)

            if len(broad_jnt) == 2:
                seal_attr = "{}_parentConstraint1.{}W2".format(lip_jnt, lip_seal)
                mc.setAttr(seal_attr, 0,)

                seal_rev = mc.createNode("reverse", name=lip_jnt.replace("JNT", "seal_REV"))
                jaw_attr_rev = mc.createNode("reverse", name=lip_jnt.replace("JNT", "jaw_attr_REV"))
                seal_mult = mc.createNode("multiplyDivide", name=lip_jnt.replace("JNT", "seal_MULT"))

                mc.connectAttr(seal_attr, "{}.inputX".format(seal_rev))
                mc.connectAttr("{}.outputX".format(seal_rev), "{}.input2X".format(seal_mult))
                mc.connectAttr("{}.outputX".format(seal_rev), "{}.input2Y".format(seal_mult))

                mc.connectAttr(
                    "jaw_attributes.{}".format(lip_jnt.replace(lip_jnt[0], "L")), 
                    "{}.input1Y".format(seal_mult)
                )

                mc.connectAttr(
                    "jaw_attributes.{}".format(lip_jnt.replace(lip_jnt[0], "L")), 
                    "{}.inputX".format(jaw_attr_rev)
                )
                
                mc.connectAttr(
                    "{}.outputX".format(jaw_attr_rev), 
                    "{}.input1.input1X".format(seal_mult)
                )
                mc.connectAttr(
                    "{}.outputX".format(jaw_attr_rev), 
                    "{}_parentConstraint1.{}W0".format(lip_jnt, broad_jnt[0])
                )

                mc.connectAttr(
                    "{}.outputY".format(seal_mult),
                    "{}_parentConstraint1.{}W1".format(lip_jnt, broad_jnt[1])
                )

def parentCornerJoints():

# asign corners jnts to new variable
    L_corner_child = 'L_jawCorner_lip_JNT'
    R_corner_child = 'R_jawCorner_lip_JNT'

# asign corners broad jnts to new variable
    L_corner_parent = 'L_jaw_broadCorner_JNT'
    R_corner_parent = 'R_jaw_broadCorner_JNT'

# asign parent constraint 
    mc.parentConstraint(L_corner_parent, L_corner_child)
    mc.parentConstraint(R_corner_parent, R_corner_child)



def createInitialValues(part, degree=1.3):
    jaw_attr = [part for part in lipPart(part) if not part.startswith('C') and not part.startswith('R')]
    value = len(jaw_attr)

    for index, attr_name in enumerate(jaw_attr[::-1]):
        attr = 'jaw_attributes.{}'.format(attr_name)

        linear_value = float(index) / float(value - 1)
        div_value = linear_value / degree
        final_value = div_value * linear_value

        mc.setAttr(attr, final_value)

    mc.select(cl=True)


def createOffsetFollow():
    jaw_attr = 'jaw_attributes'
    jaw_joint = '{}_{}_{}'.format(CENTER, JAW, JOINT)
    jaw_auto = '{}_{}_{}_AUTO'.format(CENTER, JAW, JOINT)

    # Crear jaw_attributes si no existe
    if not mc.objExists(jaw_attr):
        mc.createNode('transform', name=jaw_attr)

    # Crear jaw_auto si no existe
    if not mc.objExists(jaw_auto):
        mc.createNode('transform', name=jaw_auto)

    mc.addAttr(jaw_attr, ln='follow_ty', min=-10 , max= 10 , dv=0)
    mc.addAttr(jaw_attr, ln='follow_tz', min=-10 , max= 10 , dv=0)

    unit = mc.createNode('unitConversion',name ='{}_{}_follow_UNIT'.format(CENTER,JAW))

    remap_y = mc.createNode('remapValue', name = '{}_{}_followY_REMAP'.format(CENTER,JAW))
    mc.setAttr('{}.inputMax'.format(remap_y), 1)
 
    remap_z = mc.createNode('remapValue', name = '{}_{}_followZ_REMAP'.format(CENTER,JAW))
    mc.setAttr('{}.inputMax'.format(remap_z), 1)

    mult_y = mc.createNode('multDoubleLinear', name='{}_{}_followY_MULT'.format(CENTER,JAW))
    mc.setAttr('{}.input2'.format(mult_y), -1)

    mc.connectAttr('{}.rx'.format(jaw_joint), '{}.input'.format(unit))
    mc.connectAttr('{}.output'.format(unit), '{}.inputValue'.format(remap_y)) 
    mc.connectAttr('{}.output'.format(unit), '{}.inputValue'.format(remap_z))      

    mc.connectAttr('{}.follow_ty'.format(jaw_attr), '{}.input1'.format(mult_y))                
    mc.connectAttr('{}.follow_tz'.format(jaw_attr), '{}.outputMax'.format(remap_z))
    mc.connectAttr('{}.output'.format(mult_y), '{}.outputMax'.format(remap_y))


    mc.connectAttr('{}.outValue'.format(remap_y), '{}.ty'.format(jaw_auto))
    mc.connectAttr('{}.outValue'.format(remap_z), '{}.tz'.format(jaw_auto))

def addSealAttrs(part):
    seal_token = 'seal_{}'.format(part)
    jaw_attrs = 'jaw_attributes'

    lip_jnts = lipPart(part)
    value = len(lip_jnts)
    seal_driver = mc.createNode('lightInfo', name='C_{}_DRIV'.format(seal_token))

    triggers = {'L': [], 'R': []}

    for side in 'LR':
        # get the falloff
        delay_sub_name = '{}_{}delay_SUB'.format(side, seal_token)
        delay_sub = mc.createNode('plusMinusAverage', name=delay_sub_name)

        mc.setAttr('{}.operation'.format(delay_sub), 2)
        mc.setAttr('{}.input1D[0]'.format(delay_sub), 10)
        mc.connectAttr('{}.{}_seal_delay'.format(jaw_attrs, side), '{}.input1D[1]'.format(delay_sub))

        lerp = 1 / float(value - 1)

        delay_div_name = '{}_{}_delay_DIV'.format(side, seal_token)
        delay_div = mc.createNode('multDoubleLinear', name=delay_div_name)
        mc.setAttr('{}.input2'.format(delay_div), lerp)
        mc.connectAttr('{}.output1D'.format(delay_sub), '{}.input1'.format(delay_div))

        mult_triggers = []
        sub_triggers = []
        triggers[side].append(mult_triggers)
        triggers[side].append(sub_triggers)

        for index in range(value):
            index_name = 'jaw_{:02d}'.format(index)

            delay_mult_name = '{}_{}_{}_delay_MULT'.format(index_name, side, seal_token)
            delay_mult = mc.createNode('multDoubleLinear', name=delay_mult_name)
            mc.setAttr('{}.input1'.format(delay_mult), index)
            mc.connectAttr('{}.output'.format(delay_div), '{}.input2'.format(delay_mult))

            mult_triggers.append(delay_mult)

            delay_sub_name = '{}_{}_{}_delay_SUB'.format(index_name, side, seal_token)
            delay_sub = mc.createNode('plusMinusAverage', name=delay_sub_name)
            mc.connectAttr('{}.output'.format(delay_mult), '{}.input1D[0]'.format(delay_sub))
            mc.connectAttr('{}.{}_seal_delay'.format(jaw_attrs, side), '{}.input1D[1]'.format(delay_sub))

            sub_triggers.append(delay_sub)

    # get constraints
    cons_targets = []

    for jnt in lip_jnts:
        attrs = mc.listAttr('{}_parentConstraint1'.format(jnt), ud=True)
        for attr in attrs:
            if 'SEAL' in attr:
                cons_targets.append('{}_parentConstraint1.{}'.format(jnt, attr))

    for left_index, const_target in enumerate(cons_targets):
        right_index = value - left_index - 1

        index_name = '{}_{}'.format(seal_token, left_index)

        l_mult_trigger = triggers['L'][0][left_index]
        l_sub_trigger = triggers['L'][1][left_index]
        r_mult_trigger = triggers['R'][0][right_index]
        r_sub_trigger = triggers['R'][1][right_index]

        print(l_mult_trigger, l_sub_trigger)

        l_remap_name = 'L_{}_{}_REMAP'.format(seal_token, left_index)
        l_remap = mc.createNode('remapValue', name=l_remap_name)
        mc.setAttr('{}.outputMax'.format(l_remap), 1)
        mc.setAttr('{}.value[0].value_Interp'.format(l_remap), 2)

        mc.connectAttr('{}.output'.format(l_mult_trigger), '{}.inputMin'.format(l_remap))
        mc.connectAttr('{}.output1D'.format(l_sub_trigger), '{}.inputMax'.format(l_remap))
        mc.connectAttr('{}.L_seal'.format(jaw_attrs), '{}.inputValue'.format(l_remap))

        r_sub_name = 'R_{}_offset_{}_SUB'.format(seal_token, left_index)
        r_sub = mc.createNode('plusMinusAverage', name=r_sub_name)

        mc.setAttr('{}.input1D[0]'.format(r_sub), 1)
        mc.setAttr('{}.operation'.format(r_sub), 2)

        mc.connectAttr('{}.outValue'.format(l_remap), '{}.input1D[1]'.format(r_sub))

        r_remap_name = 'R_{}_{}_REMAP'.format(seal_token, left_index)
        r_remap = mc.createNode('remapValue', name=r_remap_name)
        mc.setAttr('{}.outputMax'.format(r_remap), 1)
        mc.setAttr('{}.value[0].value_Interp'.format(r_remap), 2)

        mc.connectAttr('{}.output'.format(r_mult_trigger), '{}.inputMin'.format(r_remap))
        mc.connectAttr('{}.output1D'.format(r_sub_trigger), '{}.inputMax'.format(r_remap))
        mc.connectAttr('{}.R_seal'.format(jaw_attrs), '{}.inputValue'.format(r_remap))
        mc.connectAttr('{}.output1D'.format(r_sub), '{}.outputMax'.format(r_remap))

        plus_name = '{}_SUM'.format(index_name)
        plus = mc.createNode('plusMinusAverage', name=plus_name)

        mc.connectAttr('{}.outValue'.format(l_remap), '{}.input1D[0]'.format(plus))
        mc.connectAttr('{}.outValue'.format(r_remap), '{}.input1D[1]'.format(plus))

        clamp_name = '{}_CLAMP'.format(index_name)
        clamp = mc.createNode('remapValue', name=clamp_name)
        mc.connectAttr('{}.output1D'.format(plus), '{}.inputValue'.format(clamp))

        attr_name = '{}_{}'.format(seal_token, left_index)
        mc.addAttr(seal_driver, at='double', ln=attr_name, min=0, max=1, dv=0)
        mc.connectAttr('{}.outValue'.format(clamp), '{}.{}'.format(seal_driver, index_name))
        
        mc.connectAttr('{}.{}'.format(seal_driver, index_name), const_target)




def outliner():
    # Eliminar los siguientes nulls
    if mc.objExists("C_jaw_JNT_offset_AUTO"):
        mc.delete("C_jaw_JNT_offset_AUTO")
    if mc.objExists("C_inverse_jaw_JNT_offset_AUTO"):
        mc.delete("C_inverse_jaw_JNT_offset_AUTO")
    if mc.objExists("C_jaw_JNT_offset_OFF"):
        mc.delete("C_jaw_JNT_offset_OFF")
    if mc.objExists("C_inverse_jaw_JNT_offset_OFF"):
        mc.delete("C_inverse_jaw_JNT_offset_OFF")

    # Emparentar "C_jaw_JNT_AUTO" a "C_jaw_guide_GROUP"
    if mc.objExists("C_jaw_JNT_AUTO") and mc.objExists("C_jaw_guide_GROUP"):
        mc.parent("C_jaw_JNT_AUTO", "C_jaw_guide_GROUP")

    # Crear el null padre "main"
    if not mc.objExists("main"):
        mc.group(empty=True, name="main")

    # Emparentar "C_jaw_guide_GROUP", "C_jaw_rig_GROUP" y "C_seal_GROUP" en "main"
    if mc.objExists("C_jaw_guide_GROUP") and mc.objExists("C_jaw_rig_GROUP") and mc.objExists("C_seal_GROUP"):
        mc.parent("C_jaw_guide_GROUP", "main")
        mc.parent("C_jaw_rig_GROUP", "main")
        mc.parent("C_seal_GROUP", "main")


def organizacion():
    mc.setAttr('{}_{}_lip_guide_{}.visibility'.format(CENTER, JAW, GROUP), 0)
    minors_jnts = mc.select("C_jawLip_minor_GROUP", hierarchy=True)
    minors_jnts = mc.ls(selection=True, long=True)
    for obj in minors_jnts:
        mc.setAttr('{}.displayLocalAxis'.format(obj), 1)

    
main_rigg = mc.createNode('transform', name= "main_joints",)




def build():
    createHierarchyAndJoints()
    createMinorJoints()
    createBroadJoints()
    createJawBase()
    createJawAttrs()
    lip_guides()
    jaw_guides()
    constraintBroadJoints()
    getLipParts()
    lipPart('lower')
    lipPart('upper')
    createSeal('lower')
    createSeal('upper')
    createConstraints()
    parentCornerJoints()
    createInitialValues('lower')
    createInitialValues('upper')
    createOffsetFollow()
    addSealAttrs('upper')
    addSealAttrs('lower')
    outliner()


createUI()
